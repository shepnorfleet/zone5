import { NextHandleFunction } from 'connect';
import { Order } from '@/api/constants';
import { Context } from '@/api/Context';
import { Model } from '@/models/Model';
import { Controller } from '@/controller/Controller';
import { Service } from '@/services/Service';

export type Middleware = NextHandleFunction;

export type KeyPrimitive = string | number;
export type KeyArray = Array<KeyPrimitive>;
export type KeyType = KeyArray | KeyPrimitive;
export type KeyBatch<K extends KeyType> = Array<K>;

export type Query = { [name: string]: string | number | boolean | Query };

/**
 * A single column sort specification
 */
export type SortItem = {
    /** the column to sort on */
    column: string;

    /** The sort order; defaults to ascending */
    order?: Order;
};

/**
 * A multi-column sort specification
 */
export type SortList = Array<SortItem>;

/**
 * RequestOptions are provided by the client to govern the form of the result
 * generated by the service for the client.
 */
export type RequestOptions = {
    /**
     * A restricted query set to limit results to; if not provided
     * all properties identified by the model are returned
     */
    query?: Query;

    /**
     * A sort to override the default model sort
     */
    sort?: SortList;

    /**
     * Optionally, skip the first number of records returned before
     * building the result
     */
    offset?: number;

    /**
     * The maximum number of records to return by the query
     */
    limit?: number;
};

/**
 * All Controller constructors follow this pattern
 */
export type ControllerCTOR<T extends Model> = new (
    id: string,
    name: string,
    path: string,
    context: Context
) => Controller<T>;

/**
 * The tracking record for each controller registered
 */
export type Registration<T extends Model> = {
    id: string;
    name: string;
    path: string;
    ctor: ControllerCTOR<T>;
    instance: Controller<T> | null;
};

/**
 * All models contructors follow this pattern
 */
export type ModelCTOR<T extends Model> = new () => T;

/**
 * All service constructors follow this pattern
 */
export type ServiceCTOR<K extends KeyType, T extends Model> = new (
    context: Context,
    modelCTOR?: ModelCTOR<T>
) => Service<K>;

/**
 * Data Transfer Object (DTO)
 */
export type DTO = {
    [name: string]: string | number | boolean | DTO | Array<DTO>;
};
