import { NextHandleFunction } from 'connect';
import { DbTypes, JsonTypes, Order } from 'core/constants';
import { ApiRequest } from 'core/ApiRequest';
import { Context } from 'core/Context';
import { Model } from 'models/Model';
import { Controller } from 'controller/Controller';
import { Service } from 'services/Service';

/**
 * Middleware type matches the express NextHandleFunction type
 */
export type Middleware = NextHandleFunction;

/**
 * Valid types to track key values
 */
export type KeyPrimitive = string | number;

/**
 * An array to track key values for a multi-column key (order is significant)
 */
export type KeyArray = Array<KeyPrimitive>;

/**
 * A generalized KeyType that might be a key primitive or a key array
 */
export type KeyType = KeyArray | KeyPrimitive;

/**
 * A batch of indivdiual KeyTypes each to identify a single entity
 */
export type KeyBatch<K extends KeyType> = Array<K>;

/**
 * Property name expression
 */
export type namex<T extends object> = (map: {
    [property in keyof T]: () => string;
}) => () => string;

/**
 * A single column sort specification
 */
export type SortItem = {
    /** the column to sort on */
    column: string;

    /** The sort order; defaults to ascending */
    order?: Order;
};

/**
 * A multi-column sort specification
 */
export type SortList = Array<SortItem>;

/**
 * RequestOptions are provided by the client to govern the form of the result
 * generated by the service for the client.
 */
export type RequestOptions = {
    /**
     * A restricted query set to limit results to; if not provided
     * all properties identified by the model are returned
     */
    query?: Query;

    /**
     * A sort to override the default model sort
     */
    sort?: SortList;

    /**
     * Optionally, skip the first number of records returned before
     * building the result
     */
    offset?: number;

    /**
     * The maximum number of records to return by the query
     */
    limit?: number;
};

/**
 * All Controller constructors follow this pattern
 */
export type ControllerCTOR<T extends Model> = new (
    id: string,
    name: string,
    path: string,
    context: Context
) => Controller<T>;

/**
 * The tracking record for each controller registered
 */
export type Registration<T extends Model> = {
    id: string;
    name: string;
    path: string;
    ctor: ControllerCTOR<T>;
    instance: Controller<T> | null;
};

/**
 * Primitive Javascript/JSON types
 */
export type Primitive = string | number | boolean;

/**
 * Defines the type used to specify the query language
 */
export type Query = { [name: string]: Primitive | Query };

/**
 * Data Transfer Object (DTO)
 */
export type DTO = {
    [key: string]: Primitive | Array<Primitive | DTO> | DTO;
};

export type ModelCTOR<T extends Model = Model> = new () => T;

/**
 * All service constructors follow this pattern
 */
export type ServiceCTOR<K extends KeyType, T extends Model> = new (
    context: Context,
    modelCTOR?: ModelCTOR<T>
) => Service<K>;

/**
 * An array of roles supported by the application
 */
export type UserRoleList<T = string> = Array<T>;

/**
 * A map of user attributes that aliases the DTO type until something more
 * specific is needed
 */
export type UserAttributes = DTO;

/**
 * A user identity type
 */
export type Identity<RoleType = string> = {
    token: string;
    attributes: UserAttributes;
    roles: UserRoleList<RoleType>;
};

/**
 * A user identity acquistion method
 */
export type UserIdentifier<RoleType = string> = (
    request: ApiRequest
) => Identity<RoleType> | null;

/**
 * Converter
 */
export type Converter<T = unknown> = {
    jsonType: JsonTypes;
    dbType: DbTypes;
    toJSON: (value: T) => Primitive;
    toDatabase: (value: Primitive) => T;
};

/**
 * A column specificication within a model
 */
export type ColumnSpec = {
    /**
     * The name of the column in the database table
     */
    name: string;

    /**
     * The json type that will hold the column value
     */
    jsonType: JsonTypes;

    /**
     * the database type that will hold the column value
     */
    dbType: DbTypes;

    /**
     * The primary key column order; or undefined if not in primary key
     */
    keyOrder?: number;

    /**
     * The default column sort level; or undefined if not used in the default
     * column sort.
     *
     * `ORDER BY name asc, category desc`
     *
     * Where 'name' is sort level 1
     *       'category' is sort level 2
     */
    sortLevel?: number;

    /**
     * The sort order for the column, see Order enuemration for options
     */
    sortOrder?: Order;
};

/**
 * Column Specification Mapping through property names
 */
export type ColumnMap = { [propertyName: string]: ColumnSpec };

/**
 * Entity interface
 */
export interface Entity {
    /**
     * A database table name
     */
    tableName: string;

    /**
     * A database schema name
     */
    schemaName: string;

    /**
     * Convert a model property name expression to a column name.
     *
     * Example:
     *
     * ```
     * //columnName will contain 'last_name' after the statement
     * const columnName = model.columnName(model=>model.lastName);
     * ```
     *
     * @param expression
     *        A property name expression arrow function
     *
     * @return string A column name is returned
     */
    column(expression: namex<this>): string;

    /**
     * Retrieve the column specification for the given property name.  If no
     * column is found then a null value is returned instead.
     *
     * @param propertyName
     *        The property name associated with the column
     *
     * @return ColumnSpec
     *         The column specification for the given property or a null value
     *         if not found.
     */
    getColumn(propertyName: string): ColumnSpec | null;

    /**
     * Retrieve the column name for a given property name
     *
     * @param propertyName
     *        The name of the property associated with the column
     *
     * @return string
     *         A string containing the column name or undefined if property
     *         name was not found to be associated with a column.
     */
    getColumnName(propertyName: string): string | undefined;

    /**
     * Retrieve all the names of properties associated with a database column
     *
     * @return Array<string>
     *         An array of proprety names
     */
    getPropertyNames(): string[];

    /**
     * Retrieve all the property names for columns that occur in the primary
     * key; the order of the property name in the array matches the order of
     * the column in the key.
     *
     * @return Array<string>
     */
    getKeyPropertyNames(): string[];

    /**
     * Retrieve all the property names for columns that occur in the default
     * sort specivied for the model.  The order of the property name in the
     * sort array indicates the sort level of the column.
     *
     * @return Array<string>
     */
    getSortPropertyNames(): string[];
}
